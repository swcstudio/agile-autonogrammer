/**
 * Vulnerability Scanner Component
 * 
 * Advanced AI-powered vulnerability scanning with real-time analysis
 * Supports Red Team operations with comprehensive security testing
 */

import { useKatalyst } from '@katalyst/hooks';
import { useVulnerabilityScanner } from '../hooks/useVulnerabilityScanner';
import { VulnerabilityReport, Vulnerability } from '../types';

interface VulnerabilityScannerProps {
  code?: string;
  language?: string;
  autoScan?: boolean;
  onScanComplete?: (report: VulnerabilityReport) => void;
  theme?: 'dark' | 'light';
}

export function VulnerabilityScanner({
  code = '',
  language = 'auto',
  autoScan = false,
  onScanComplete,
  theme = 'dark'
}: VulnerabilityScannerProps) {
  const k = useKatalyst();
  const [scanCode, setScanCode] = k.state(code);
  const [selectedLanguage, setSelectedLanguage] = k.state(language);
  const [isExpanded, setIsExpanded] = k.state(false);
  
  const {
    scan,
    scanning,
    report,
    error,
    history,
    clearHistory
  } = useVulnerabilityScanner();
  
  // Auto-scan on mount if enabled
  k.effect(() => {
    if (autoScan && scanCode) {
      handleScan();
    }
  }, [autoScan]);
  
  // Notify on scan complete
  k.effect(() => {
    if (report && onScanComplete) {
      onScanComplete(report);
    }
  }, [report]);
  
  const handleScan = async () => {
    await scan(scanCode, selectedLanguage);
  };
  
  const getSeverityColor = (severity: string) => {
    const colors = {
      Critical: 'text-red-600 bg-red-100',
      High: 'text-orange-600 bg-orange-100',
      Medium: 'text-yellow-600 bg-yellow-100',
      Low: 'text-blue-600 bg-blue-100'
    };
    return colors[severity] || 'text-gray-600 bg-gray-100';
  };
  
  const getSeverityIcon = (severity: string) => {
    const icons = {
      Critical: 'ðŸ”´',
      High: 'ðŸŸ ',
      Medium: 'ðŸŸ¡',
      Low: 'ðŸ”µ'
    };
    return icons[severity] || 'âšª';
  };
  
  return (
    <div className={`katalyst-vulnerability-scanner ${theme === 'dark' ? 'bg-gray-900 text-white' : 'bg-white text-gray-900'} rounded-lg shadow-xl p-6`}>
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-3">
          <div className="p-2 bg-red-500 rounded-lg">
            <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
          </div>
          <div>
            <h2 className="text-2xl font-bold">Vulnerability Scanner</h2>
            <p className="text-sm opacity-70">AI-powered security analysis</p>
          </div>
        </div>
        
        <div className="flex items-center gap-2">
          <span className="text-xs px-2 py-1 bg-purple-500 text-white rounded">Red Team</span>
          <span className="text-xs px-2 py-1 bg-green-500 text-white rounded">OWASP</span>
          <span className="text-xs px-2 py-1 bg-blue-500 text-white rounded">CWE</span>
        </div>
      </div>
      
      {/* Code Input */}
      <div className="space-y-4 mb-6">
        <div className="flex gap-2">
          <select
            value={selectedLanguage}
            onChange={(e) => setSelectedLanguage(e.target.value)}
            className={`px-4 py-2 rounded-lg border ${
              theme === 'dark' 
                ? 'bg-gray-800 border-gray-700 text-white' 
                : 'bg-white border-gray-300 text-gray-900'
            }`}
          >
            <option value="auto">Auto-detect</option>
            <option value="javascript">JavaScript</option>
            <option value="typescript">TypeScript</option>
            <option value="python">Python</option>
            <option value="java">Java</option>
            <option value="csharp">C#</option>
            <option value="go">Go</option>
            <option value="rust">Rust</option>
            <option value="php">PHP</option>
            <option value="ruby">Ruby</option>
            <option value="cpp">C++</option>
            <option value="swift">Swift</option>
          </select>
          
          <button
            onClick={() => setIsExpanded(!isExpanded)}
            className="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors"
          >
            {isExpanded ? 'Collapse' : 'Expand'} Editor
          </button>
          
          <button
            onClick={handleScan}
            disabled={scanning || !scanCode}
            className={`flex-1 px-6 py-2 rounded-lg font-semibold transition-all ${
              scanning || !scanCode
                ? 'bg-gray-500 cursor-not-allowed opacity-50'
                : 'bg-red-600 hover:bg-red-700 text-white shadow-lg hover:shadow-xl'
            }`}
          >
            {scanning ? (
              <span className="flex items-center justify-center gap-2">
                <svg className="animate-spin h-5 w-5" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none"/>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"/>
                </svg>
                Scanning...
              </span>
            ) : (
              'Scan for Vulnerabilities'
            )}
          </button>
        </div>
        
        {(isExpanded || !report) && (
          <textarea
            value={scanCode}
            onChange={(e) => setScanCode(e.target.value)}
            placeholder="Paste your code here for security analysis..."
            className={`w-full h-64 p-4 rounded-lg border font-mono text-sm ${
              theme === 'dark'
                ? 'bg-gray-800 border-gray-700 text-gray-100 placeholder-gray-500'
                : 'bg-gray-50 border-gray-300 text-gray-900 placeholder-gray-400'
            }`}
          />
        )}
      </div>
      
      {/* Error Display */}
      {error && (
        <div className="mb-6 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg">
          <div className="flex items-center gap-2">
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span className="font-semibold">Scan Error:</span>
          </div>
          <p className="mt-2">{error}</p>
        </div>
      )}
      
      {/* Scan Results */}
      {report && (
        <div className="space-y-6">
          {/* Summary */}
          <div className={`p-6 rounded-lg ${theme === 'dark' ? 'bg-gray-800' : 'bg-gray-100'}`}>
            <h3 className="text-lg font-semibold mb-4">Security Analysis Summary</h3>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center">
                <div className="text-3xl font-bold text-red-600">
                  {report.vulnerabilities.filter(v => v.severity === 'Critical').length}
                </div>
                <div className="text-sm opacity-70">Critical</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-orange-600">
                  {report.vulnerabilities.filter(v => v.severity === 'High').length}
                </div>
                <div className="text-sm opacity-70">High</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-yellow-600">
                  {report.vulnerabilities.filter(v => v.severity === 'Medium').length}
                </div>
                <div className="text-sm opacity-70">Medium</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-blue-600">
                  {report.vulnerabilities.filter(v => v.severity === 'Low').length}
                </div>
                <div className="text-sm opacity-70">Low</div>
              </div>
            </div>
            
            <div className="mt-4 pt-4 border-t border-gray-700">
              <div className="flex items-center justify-between">
                <div>
                  <span className="text-sm opacity-70">Risk Score</span>
                  <div className="text-2xl font-bold">{report.riskScore}/100</div>
                </div>
                <div>
                  <span className="text-sm opacity-70">Compliance</span>
                  <div className="flex gap-1 mt-1">
                    {Object.entries(report.complianceStatus.standards).map(([std, compliant]) => (
                      <span
                        key={std}
                        className={`px-2 py-1 text-xs rounded ${
                          compliant ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
                        }`}
                      >
                        {std}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          {/* Vulnerabilities List */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold">Detected Vulnerabilities</h3>
            
            {report.vulnerabilities.length === 0 ? (
              <div className={`p-6 rounded-lg text-center ${theme === 'dark' ? 'bg-green-900' : 'bg-green-100'}`}>
                <svg className="w-16 h-16 mx-auto text-green-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <p className="text-lg font-semibold text-green-600">No vulnerabilities detected!</p>
                <p className="text-sm opacity-70 mt-2">Your code passed the security scan.</p>
              </div>
            ) : (
              report.vulnerabilities
                .sort((a, b) => {
                  const severityOrder = { Critical: 0, High: 1, Medium: 2, Low: 3 };
                  return severityOrder[a.severity] - severityOrder[b.severity];
                })
                .map((vuln, index) => (
                  <VulnerabilityCard
                    key={index}
                    vulnerability={vuln}
                    theme={theme}
                  />
                ))
            )}
          </div>
          
          {/* Recommendations */}
          {report.recommendations.length > 0 && (
            <div className={`p-6 rounded-lg ${theme === 'dark' ? 'bg-gray-800' : 'bg-gray-100'}`}>
              <h3 className="text-lg font-semibold mb-4">Security Recommendations</h3>
              <ul className="space-y-2">
                {report.recommendations.map((rec, index) => (
                  <li key={index} className="flex items-start gap-2">
                    <svg className="w-5 h-5 text-green-500 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>
                    <span className="text-sm">{rec}</span>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      )}
      
      {/* Scan History */}
      {history.length > 0 && (
        <div className="mt-6 pt-6 border-t border-gray-700">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold">Scan History</h3>
            <button
              onClick={clearHistory}
              className="text-sm text-red-500 hover:text-red-400"
            >
              Clear History
            </button>
          </div>
          <div className="space-y-2">
            {history.slice(0, 5).map((scan, index) => (
              <div
                key={index}
                className={`p-3 rounded-lg flex items-center justify-between ${
                  theme === 'dark' ? 'bg-gray-800' : 'bg-gray-100'
                }`}
              >
                <div className="flex items-center gap-3">
                  <span className="text-xs opacity-50">
                    {new Date(scan.timestamp).toLocaleString()}
                  </span>
                  <span className="text-sm font-mono">{scan.language}</span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-sm">Risk: {scan.riskScore}/100</span>
                  <span className={`px-2 py-1 text-xs rounded ${
                    scan.vulnerabilities.length === 0
                      ? 'bg-green-500 text-white'
                      : 'bg-red-500 text-white'
                  }`}>
                    {scan.vulnerabilities.length} issues
                  </span>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}

// Vulnerability Card Component
function VulnerabilityCard({ 
  vulnerability, 
  theme 
}: { 
  vulnerability: Vulnerability; 
  theme: 'dark' | 'light';
}) {
  const k = useKatalyst();
  const [isExpanded, setIsExpanded] = k.state(false);
  
  const getSeverityColor = (severity: string) => {
    const colors = {
      Critical: 'border-red-500 bg-red-500/10',
      High: 'border-orange-500 bg-orange-500/10',
      Medium: 'border-yellow-500 bg-yellow-500/10',
      Low: 'border-blue-500 bg-blue-500/10'
    };
    return colors[severity] || 'border-gray-500 bg-gray-500/10';
  };
  
  return (
    <div className={`p-4 rounded-lg border-2 ${getSeverityColor(vulnerability.severity)} transition-all`}>
      <div 
        className="cursor-pointer"
        onClick={() => setIsExpanded(!isExpanded)}
      >
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <div className="flex items-center gap-2 mb-2">
              <span className={`px-2 py-1 text-xs font-semibold rounded ${
                vulnerability.severity === 'Critical' ? 'bg-red-600 text-white' :
                vulnerability.severity === 'High' ? 'bg-orange-600 text-white' :
                vulnerability.severity === 'Medium' ? 'bg-yellow-600 text-white' :
                'bg-blue-600 text-white'
              }`}>
                {vulnerability.severity}
              </span>
              <span className="text-sm font-mono opacity-70">CWE-{vulnerability.cwe_id}</span>
              {vulnerability.lines.length > 0 && (
                <span className="text-sm opacity-70">
                  Lines: {vulnerability.lines.join(', ')}
                </span>
              )}
            </div>
            <h4 className="font-semibold">{vulnerability.type}</h4>
            <p className="text-sm opacity-80 mt-1">{vulnerability.description}</p>
          </div>
          <svg
            className={`w-5 h-5 transition-transform ${isExpanded ? 'rotate-180' : ''}`}
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
          </svg>
        </div>
      </div>
      
      {isExpanded && (
        <div className="mt-4 pt-4 border-t border-gray-600 space-y-4">
          {vulnerability.poc && (
            <div>
              <h5 className="text-sm font-semibold mb-2">Proof of Concept:</h5>
              <pre className={`p-3 rounded text-xs overflow-x-auto ${
                theme === 'dark' ? 'bg-gray-900' : 'bg-gray-200'
              }`}>
                {vulnerability.poc}
              </pre>
            </div>
          )}
          
          <div>
            <h5 className="text-sm font-semibold mb-2">Remediation:</h5>
            <p className="text-sm opacity-80">{vulnerability.remediation}</p>
          </div>
        </div>
      )}
    </div>
  );
}