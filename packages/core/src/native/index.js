// prettier-ignore
/* eslint-disable */
// @ts-nocheck
/* auto-generated by NAPI-RS */

const { createRequire } = require('node:module')
require = createRequire(__filename)

const { readFileSync } = require('node:fs')
let nativeBinding = null
const loadErrors = []

const isMusl = () => {
  let musl = false
  if (process.platform === 'linux') {
    musl = isMuslFromFilesystem()
    if (musl === null) {
      musl = isMuslFromReport()
    }
    if (musl === null) {
      musl = isMuslFromChildProcess()
    }
  }
  return musl
}

const isFileMusl = (f) => f.includes('libc.musl-') || f.includes('ld-musl-')

const isMuslFromFilesystem = () => {
  try {
    return readFileSync('/usr/bin/ldd', 'utf-8').includes('musl')
  } catch {
    return null
  }
}

const isMuslFromReport = () => {
  let report = null
  if (typeof process.report?.getReport === 'function') {
    process.report.excludeNetwork = true
    report = process.report.getReport()
  }
  if (!report) {
    return null
  }
  if (report.header && report.header.glibcVersionRuntime) {
    return false
  }
  if (Array.isArray(report.sharedObjects)) {
    if (report.sharedObjects.some(isFileMusl)) {
      return true
    }
  }
  return false
}

const isMuslFromChildProcess = () => {
  try {
    return require('child_process').execSync('ldd --version', { encoding: 'utf8' }).includes('musl')
  } catch (e) {
    // If we reach this case, we don't know if the system is musl or not, so is better to just fallback to false
    return false
  }
}

function requireNative() {
  if (process.env.NAPI_RS_NATIVE_LIBRARY_PATH) {
    try {
      nativeBinding = require(process.env.NAPI_RS_NATIVE_LIBRARY_PATH);
    } catch (err) {
      loadErrors.push(err)
    }
  } else if (process.platform === 'android') {
    if (process.arch === 'arm64') {
      try {
        return require('./swcstudio-multithreading.android-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@swcstudio/multithreading-android-arm64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm') {
      try {
        return require('./swcstudio-multithreading.android-arm-eabi.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@swcstudio/multithreading-android-arm-eabi')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Android ${process.arch}`))
    }
  } else if (process.platform === 'win32') {
    if (process.arch === 'x64') {
      try {
        return require('./swcstudio-multithreading.win32-x64-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@swcstudio/multithreading-win32-x64-msvc')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'ia32') {
      try {
        return require('./swcstudio-multithreading.win32-ia32-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@swcstudio/multithreading-win32-ia32-msvc')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./swcstudio-multithreading.win32-arm64-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@swcstudio/multithreading-win32-arm64-msvc')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Windows: ${process.arch}`))
    }
  } else if (process.platform === 'darwin') {
    try {
      return require('./swcstudio-multithreading.darwin-universal.node')
    } catch (e) {
      loadErrors.push(e)
    }
    try {
      return require('@swcstudio/multithreading-darwin-universal')
    } catch (e) {
      loadErrors.push(e)
    }
    if (process.arch === 'x64') {
      try {
        return require('./swcstudio-multithreading.darwin-x64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@swcstudio/multithreading-darwin-x64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./swcstudio-multithreading.darwin-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@swcstudio/multithreading-darwin-arm64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on macOS: ${process.arch}`))
    }
  } else if (process.platform === 'freebsd') {
    if (process.arch === 'x64') {
      try {
        return require('./swcstudio-multithreading.freebsd-x64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@swcstudio/multithreading-freebsd-x64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./swcstudio-multithreading.freebsd-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@swcstudio/multithreading-freebsd-arm64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on FreeBSD: ${process.arch}`))
    }
  } else if (process.platform === 'linux') {
    if (process.arch === 'x64') {
      if (isMusl()) {
        try {
          return require('./swcstudio-multithreading.linux-x64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@swcstudio/multithreading-linux-x64-musl')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./swcstudio-multithreading.linux-x64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@swcstudio/multithreading-linux-x64-gnu')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'arm64') {
      if (isMusl()) {
        try {
          return require('./swcstudio-multithreading.linux-arm64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@swcstudio/multithreading-linux-arm64-musl')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./swcstudio-multithreading.linux-arm64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@swcstudio/multithreading-linux-arm64-gnu')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'arm') {
      if (isMusl()) {
        try {
          return require('./swcstudio-multithreading.linux-arm-musleabihf.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@swcstudio/multithreading-linux-arm-musleabihf')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./swcstudio-multithreading.linux-arm-gnueabihf.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@swcstudio/multithreading-linux-arm-gnueabihf')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'riscv64') {
      if (isMusl()) {
        try {
          return require('./swcstudio-multithreading.linux-riscv64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@swcstudio/multithreading-linux-riscv64-musl')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./swcstudio-multithreading.linux-riscv64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@swcstudio/multithreading-linux-riscv64-gnu')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'ppc64') {
      try {
        return require('./swcstudio-multithreading.linux-ppc64-gnu.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@swcstudio/multithreading-linux-ppc64-gnu')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 's390x') {
      try {
        return require('./swcstudio-multithreading.linux-s390x-gnu.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@swcstudio/multithreading-linux-s390x-gnu')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Linux: ${process.arch}`))
    }
  } else if (process.platform === 'openharmony') {
    if (process.arch === 'arm64') {
      try {
        return require('./swcstudio-multithreading.linux-arm64-ohos.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@swcstudio/multithreading-linux-arm64-ohos')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'x64') {
      try {
        return require('./swcstudio-multithreading.linux-x64-ohos.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@swcstudio/multithreading-linux-x64-ohos')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm') {
      try {
        return require('./swcstudio-multithreading.linux-arm-ohos.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@swcstudio/multithreading-linux-arm-ohos')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on OpenHarmony: ${process.arch}`))
    }
  } else {
    loadErrors.push(new Error(`Unsupported OS: ${process.platform}, architecture: ${process.arch}`))
  }
}

nativeBinding = requireNative()

if (!nativeBinding || process.env.NAPI_RS_FORCE_WASI) {
  try {
    nativeBinding = require('./swcstudio-multithreading.wasi.cjs')
  } catch (err) {
    if (process.env.NAPI_RS_FORCE_WASI) {
      loadErrors.push(err)
    }
  }
  if (!nativeBinding) {
    try {
      nativeBinding = require('@swcstudio/multithreading-wasm32-wasi')
    } catch (err) {
      if (process.env.NAPI_RS_FORCE_WASI) {
        loadErrors.push(err)
      }
    }
  }
}

if (!nativeBinding) {
  if (loadErrors.length > 0) {
    throw new Error(
      `Cannot find native binding. ` +
        `npm has a bug related to optional dependencies (https://github.com/npm/cli/issues/4828). ` +
        'Please try `npm i` again after removing both package-lock.json and node_modules directory.',
      { cause: loadErrors }
    )
  }
  throw new Error(`Failed to load native binding`)
}

module.exports = nativeBinding
module.exports.Barrier = nativeBinding.Barrier
module.exports.BumpAllocator = nativeBinding.BumpAllocator
module.exports.CrossbeamArrayQueue = nativeBinding.CrossbeamArrayQueue
module.exports.CrossbeamAtomicCell = nativeBinding.CrossbeamAtomicCell
module.exports.CrossbeamChannel = nativeBinding.CrossbeamChannel
module.exports.CrossbeamSegQueue = nativeBinding.CrossbeamSegQueue
module.exports.DashMap = nativeBinding.DashMap
module.exports.DashSet = nativeBinding.DashSet
module.exports.FairMutexWrapper = nativeBinding.FairMutexWrapper
module.exports.FlumeChannel = nativeBinding.FlumeChannel
module.exports.FlumeReceiver = nativeBinding.FlumeReceiver
module.exports.FlumeSelector = nativeBinding.FlumeSelector
module.exports.FlumeSender = nativeBinding.FlumeSender
module.exports.MemoryMappedFile = nativeBinding.MemoryMappedFile
module.exports.MemoryPool = nativeBinding.MemoryPool
module.exports.MultithreadingManager = nativeBinding.MultithreadingManager
module.exports.Mutex = nativeBinding.Mutex
module.exports.OnceCell = nativeBinding.OnceCell
module.exports.RayonThreadPool = nativeBinding.RayonThreadPool
module.exports.RwLock = nativeBinding.RwLock
module.exports.Semaphore = nativeBinding.Semaphore
module.exports.ShardedMap = nativeBinding.ShardedMap
module.exports.SimdF32X4 = nativeBinding.SimdF32X4
module.exports.SimdF32x4 = nativeBinding.SimdF32x4
module.exports.SimdF32X8 = nativeBinding.SimdF32X8
module.exports.SimdF32x8 = nativeBinding.SimdF32x8
module.exports.SimdMatrix = nativeBinding.SimdMatrix
module.exports.ThreadId = nativeBinding.ThreadId
module.exports.ThreadLocalCounter = nativeBinding.ThreadLocalCounter
module.exports.ThreadLocalMap = nativeBinding.ThreadLocalMap
module.exports.ThreadLocalStorage = nativeBinding.ThreadLocalStorage
module.exports.TokioBroadcastChannel = nativeBinding.TokioBroadcastChannel
module.exports.TokioMpscChannel = nativeBinding.TokioMpscChannel
module.exports.TokioRuntime = nativeBinding.TokioRuntime
module.exports.TokioTimer = nativeBinding.TokioTimer
module.exports.benchmarkParallelOperations = nativeBinding.benchmarkParallelOperations
module.exports.createBarrier = nativeBinding.createBarrier
module.exports.createBumpAllocator = nativeBinding.createBumpAllocator
module.exports.createCrossbeamArrayQueue = nativeBinding.createCrossbeamArrayQueue
module.exports.createCrossbeamAtomicCell = nativeBinding.createCrossbeamAtomicCell
module.exports.createCrossbeamChannel = nativeBinding.createCrossbeamChannel
module.exports.createCrossbeamSegQueue = nativeBinding.createCrossbeamSegQueue
module.exports.createDashmap = nativeBinding.createDashmap
module.exports.createDashmapWithCapacity = nativeBinding.createDashmapWithCapacity
module.exports.createDashset = nativeBinding.createDashset
module.exports.createFairMutex = nativeBinding.createFairMutex
module.exports.createFlumeBounded = nativeBinding.createFlumeBounded
module.exports.createFlumeSelector = nativeBinding.createFlumeSelector
module.exports.createFlumeUnbounded = nativeBinding.createFlumeUnbounded
module.exports.createMemoryPool = nativeBinding.createMemoryPool
module.exports.createOnceCell = nativeBinding.createOnceCell
module.exports.createParkingLotMutex = nativeBinding.createParkingLotMutex
module.exports.createParkingLotRwlock = nativeBinding.createParkingLotRwlock
module.exports.createRayonThreadPool = nativeBinding.createRayonThreadPool
module.exports.createSemaphore = nativeBinding.createSemaphore
module.exports.createShardedMap = nativeBinding.createShardedMap
module.exports.createSimdF32X4 = nativeBinding.createSimdF32X4
module.exports.createSimdMatrix = nativeBinding.createSimdMatrix
module.exports.createThreadLocalCounter = nativeBinding.createThreadLocalCounter
module.exports.createThreadLocalMap = nativeBinding.createThreadLocalMap
module.exports.createThreadLocalStorage = nativeBinding.createThreadLocalStorage
module.exports.createTokioBroadcastChannel = nativeBinding.createTokioBroadcastChannel
module.exports.createTokioMpscChannel = nativeBinding.createTokioMpscChannel
module.exports.createTokioRuntime = nativeBinding.createTokioRuntime
module.exports.createTokioTimer = nativeBinding.createTokioTimer
module.exports.getAllThreadNames = nativeBinding.getAllThreadNames
module.exports.getMultithreadingInfo = nativeBinding.getMultithreadingInfo
module.exports.getPerformanceMetrics = nativeBinding.getPerformanceMetrics
module.exports.getRayonGlobalThreadCount = nativeBinding.getRayonGlobalThreadCount
module.exports.getSystemInfo = nativeBinding.getSystemInfo
module.exports.getTokioRuntimeMetrics = nativeBinding.getTokioRuntimeMetrics
module.exports.initializeMultithreading = nativeBinding.initializeMultithreading
module.exports.parallelChunkProcess = nativeBinding.parallelChunkProcess
module.exports.parallelFilter = nativeBinding.parallelFilter
module.exports.parallelMap = nativeBinding.parallelMap
module.exports.parallelReduce = nativeBinding.parallelReduce
module.exports.parallelSort = nativeBinding.parallelSort
module.exports.registerCurrentThread = nativeBinding.registerCurrentThread
module.exports.shutdownMultithreading = nativeBinding.shutdownMultithreading
module.exports.simdDotProduct = nativeBinding.simdDotProduct
module.exports.simdParallelSum = nativeBinding.simdParallelSum
module.exports.simdVectorAdd = nativeBinding.simdVectorAdd
module.exports.simdVectorScale = nativeBinding.simdVectorScale
module.exports.stressTestConcurrency = nativeBinding.stressTestConcurrency
module.exports.tokioDelay = nativeBinding.tokioDelay
module.exports.tokioParallelTasks = nativeBinding.tokioParallelTasks
module.exports.tokioTimeout = nativeBinding.tokioTimeout
module.exports.unregisterCurrentThread = nativeBinding.unregisterCurrentThread
