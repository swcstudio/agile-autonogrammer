/**
 * ðŸš€ KATALYST HOOKS - UNIFIED INTERFACE
 * =====================================
 * 
 * THE ONLY HOOK YOU NEED: useKatalyst()
 * 
 * Example usage:
 * ```tsx
 * import { useKatalyst } from '@katalyst/hooks';
 * 
 * function MyComponent() {
 *   const k = useKatalyst();
 *   
 *   // Use any hook through the unified interface
 *   const [state, setState] = k.state('initial');
 *   const debouncedValue = k.utils.debounce(state, 500);
 *   const { width, height } = k.dom.windowSize();
 *   const runtime = k.runtime();
 *   
 *   // Quick access with $
 *   const [count, setCount] = k.$.state(0);
 *   const isMobile = k.$.mediaQuery('(max-width: 768px)');
 *   
 *   // Common patterns
 *   const modal = k.patterns.modal();
 *   const { filtered } = k.patterns.search(items, 'name');
 *   const { currentPage, nextPage } = k.patterns.pagination(100, 10);
 * }
 * ```
 */

// ========================================
// ðŸŽ¯ PRIMARY EXPORT - USE THIS!
// ========================================
export { 
  useKatalyst, 
  type KatalystHook,
  katalystCore,
  katalystDOM,
  katalystUtils 
} from './use-katalyst-unified';

// ========================================
// ðŸš€ REACT COMPATIBILITY LAYER
// ========================================
export * as React from './react';
export * from './react-compat';

// ========================================
// ðŸ”§ CORE HOOKS (Available via useKatalyst)
// ========================================
export * from './core/common-hooks';
export * from './core/dom-hooks';
export * from './core/utility-hooks';

// ========================================
// ðŸš€ KATALYST RUNTIME & INTEGRATIONS
// ========================================
export { useKatalystRuntime, type KatalystRuntimeConfig } from './use-katalyst-runtime';
export * from './use-multithreading';

// ========================================
// ðŸŒŸ ELIXIR/PHOENIX-INSPIRED HOOKS
// ========================================
export * from './use-actor-system';
export * from './use-genserver';
export * from './use-pubsub';
export * from './use-registry';
export * from './use-channels';
export * from './use-ets';
export * from './use-presence';

// ========================================
// ðŸ“¦ LEGACY EXPORTS (For backward compatibility)
// ========================================
export * from './use-config';
export * from './use-emp';
export * from './use-hydration';
export * from './use-integration';
export * from './use-katalyst';
export * from './use-rspack';
export * from './use-sails';
export * from './use-inspector';
export * from './use-server-actions';
export * from './use-unified-builder';
export * from './use-zephyr';
export * from './use-umi';
export * from './use-rspeedy';
export * from './use-arco';
export * from './use-trpc';
export * from './use-typia';
export * from './use-tapable';

// ========================================
// ðŸ“š HOOK USAGE GUIDE
// ========================================

/**
 * QUICK REFERENCE:
 * 
 * useKatalyst() provides:
 * 
 * 1. CORE REACT (Enhanced):
 *    - k.state()       â†’ useState with persistence & history
 *    - k.effect()      â†’ useEffect with debounce/throttle
 *    - k.callback()    â†’ useCallback
 *    - k.memo()        â†’ useMemo
 *    - k.ref()         â†’ useRef
 * 
 * 2. DOM & BROWSER:
 *    - k.dom.windowSize()       â†’ Window dimensions
 *    - k.dom.mediaQuery()       â†’ Media query matching
 *    - k.dom.outsideClick()     â†’ Click outside detection
 *    - k.dom.scrollPosition()   â†’ Scroll position tracking
 *    - k.dom.inView()          â†’ Intersection observer
 *    - k.dom.localStorage()     â†’ Local storage with sync
 *    - k.dom.clipboard()        â†’ Clipboard operations
 *    - k.dom.keyPress()         â†’ Keyboard event handling
 *    - k.dom.scrollDirection()  â†’ Scroll direction detection
 *    - k.dom.onlineStatus()     â†’ Online/offline status
 * 
 * 3. UTILITIES:
 *    - k.utils.debounce()      â†’ Debounced values
 *    - k.utils.throttle()      â†’ Throttled values
 *    - k.utils.toggle()        â†’ Boolean toggle
 *    - k.utils.counter()       â†’ Counter operations
 *    - k.utils.previous()      â†’ Previous value tracking
 *    - k.utils.async()         â†’ Async operation handling
 *    - k.utils.interval()      â†’ Interval management
 *    - k.utils.timeout()       â†’ Timeout management
 *    - k.utils.fetch()         â†’ Data fetching
 *    - k.utils.mount()         â†’ Mount callback
 *    - k.utils.unmount()       â†’ Unmount callback
 *    - k.utils.updateEffect()  â†’ Effect skipping first render
 * 
 * 4. BUILD TOOLS:
 *    - k.build.emp()           â†’ EMP integration
 *    - k.build.umi()           â†’ UMI integration
 *    - k.build.rspack()        â†’ RSPack integration
 *    - k.build.zephyr()        â†’ Zephyr integration
 *    - k.build.unified()       â†’ Unified builder
 * 
 * 5. INTEGRATIONS:
 *    - k.integrations.arco()   â†’ Arco Design
 *    - k.integrations.trpc()   â†’ tRPC
 *    - k.integrations.typia()  â†’ Typia validation
 *    - k.integrations.sails()  â†’ Sails framework
 * 
 * 6. COMMON PATTERNS:
 *    - k.patterns.query()      â†’ Data fetching
 *    - k.patterns.store()      â†’ Persistent state
 *    - k.patterns.modal()      â†’ Modal management
 *    - k.patterns.pagination() â†’ Pagination logic
 *    - k.patterns.search()     â†’ Search filtering
 *    - k.patterns.filter()     â†’ Multi-filter logic
 *    - k.patterns.sort()       â†’ Sorting logic
 * 
 * 7. QUICK ACCESS ($):
 *    - k.$.state()            â†’ Most used hooks
 *    - k.$.effect()           â†’ for quick access
 *    - k.$.fetch()
 *    - k.$.debounce()
 *    - k.$.localStorage()
 */

// ========================================
// ðŸŽ¨ TYPE EXPORTS
// ========================================
export type {
  // Multithreading types
  AdvancedThreadTask,
  AdvancedTaskResult,
  ThreadPoolMetrics,
  SystemMetrics,
  ThreadLifecycleConfig,
} from './use-multithreading';

// Re-export for convenience
export type { KatalystConfig } from '../types/index';

// ========================================
// ðŸŒŸ MIGRATION HELPER
// ========================================

/**
 * Migrate from individual hooks to useKatalyst:
 * 
 * OLD:
 * ```tsx
 * import { useState, useEffect } from 'react';
 * import { useWindowSize, useDebounce } from '@katalyst/hooks';
 * import { useEMP } from '@katalyst/hooks';
 * 
 * function Component() {
 *   const [value, setValue] = useState('');
 *   const debouncedValue = useDebounce(value, 500);
 *   const { width } = useWindowSize();
 *   const emp = useEMP();
 * }
 * ```
 * 
 * NEW:
 * ```tsx
 * import { useKatalyst } from '@katalyst/hooks';
 * 
 * function Component() {
 *   const k = useKatalyst();
 *   const [value, setValue] = k.state('');
 *   const debouncedValue = k.utils.debounce(value, 500);
 *   const { width } = k.dom.windowSize();
 *   const emp = k.build.emp();
 * }
 * ```
 */